# This workflow scans your project for both open source vulnerabilities and
# code quality issues using Snyk. It will upload the results of both scans
# to GitHub's Security tab.
#
# For more examples and options, see https://github.com/snyk/actions

# This workflow integrates Snyk security scanning into your GitHub repository.
# It runs on pushes and pull requests to the main branch, scanning for 
# code vulnerabilities and open-source dependency issues.

name: Snyk Security Scan Code and Open Source

on:
    # The 'push' event triggers the workflow when changes are pushed to the repository.
  push:
    branches: ["main"]
    # The 'pull_request' event triggers the workflow when a pull request is opened or updated.
  pull_request:
    branches: ["main"]
  # schedule:
    # Run the scan daily at midnight UTC.
    # - cron: '0 0 * * *'


# The 'permissions' block defines the permissions granted to the GITHUB_TOKEN for this workflow.
permissions:
    # 'contents: read' is required to check out the repository code.
  contents: read
    # 'security-events: write' is required to upload SARIF files to GitHub's Security tab.
  security-events: write

# The 'jobs' block contains a sequence of tasks called jobs.
jobs:
  # This job is named 'snyk' and runs the security scans.
  snyk:
    # This specifies that the job will run on the latest version of an Ubuntu Linux runner.
    runs-on: ubuntu-latest
    # The 'env' block sets environment variables for the job.
    env:
      # The SNYK_TOKEN is a secret that authenticates the Snyk CLI.
      # It's stored in GitHub secrets and passed to the job as an environment variable.
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    # The 'steps' block contains a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check out the repository code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up the Node.js environment.
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install project dependencies and the Snyk CLI.
      - name: Install dependencies
        run: npm install

      - name: Install Snyk CLI
        run: npm install -g snyk

      # Step 4: Run Snyk Code (SAST) scan to find vulnerabilities in your code.
      # The results are saved to a SARIF file.
      - name: Run Snyk Code scan
        run: snyk code test --sarif-file-output=snyk-code.sarif || true

      # Step 5: Upload the Snyk Code SARIF file to the GitHub Security tab.
      - name: Upload Snyk Code results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif
          category: snyk-code

      # Step 6: Run Snyk Open Source (SCA) scan to find vulnerabilities in your dependencies.
      # The results are saved to a SARIF file.
      - name: Run Snyk Open Source scan
        run: snyk test --all-projects --sarif-file-output=snyk-oss.sarif || true

      # Step 7: Upload the Snyk Open Source SARIF file to the GitHub Security tab.
      - name: Upload Snyk Open Source results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-oss.sarif
          category: snyk-oss
